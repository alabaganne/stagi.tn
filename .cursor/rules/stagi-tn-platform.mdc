---
description:
globs:
alwaysApply: false
---
# Stagi.tn - Internship Management Platform

## Project Overview
Stagi.tn is a Laravel-based internship management platform that connects students, companies, and university supervisors in Tunisia. The platform facilitates internship posting, application management, and communication between stakeholders.

## Tech Stack

### Backend
- **Laravel 8** - PHP web framework
- **PHP 7.3+ or 8.0+** - Server-side language
- **MySQL/PostgreSQL** - Database
- **Laravel Sanctum** - API authentication
- **Laravel Breeze** - Authentication scaffolding
- **Pusher** - Real-time messaging and notifications
- **Laravel Echo** - WebSocket client

### Frontend
- **Vue.js 3** - Progressive JavaScript framework
- **Inertia.js** - Modern monolith approach (SPA-like experience)
- **Tailwind CSS** - Utility-first CSS framework
- **Laravel Mix** - Asset compilation
- **Vuex 4** - State management
- **Axios** - HTTP client

## Core Architecture

### Key Models & Relationships
- **User** - Polymorphic base user model (students, companies, supervisors)
- **Student** - Students seeking internships
- **Company** - Companies posting internships
- **Internship** - Internship opportunities
- **Application** - Student applications to internships
- **Message** - Communication between users
- **Field** - Academic/professional fields
- **City** - Geographic locations
- **Skill** - Skills (polymorphic relationship)

### User Types & Roles
1. **Students** - Browse and apply to internships
2. **Companies** - Post internships and manage applications
3. **University Supervisors** - Oversee student progress
4. **Company Supervisors** - Supervise specific internships

## Key Files & Directories

### Backend Structure
- [app/Models/](mdc:app/Models) - Eloquent models
- [app/Http/Controllers/](mdc:app/Http/Controllers) - Application controllers
- [app/Http/Requests/](mdc:app/Http/Requests) - Form validation
- [app/Http/Resources/](mdc:app/Http/Resources) - API resources
- [database/migrations/](mdc:database/migrations) - Database schema
- [routes/web.php](mdc:routes/web.php) - Web routes

### Frontend Structure
- [resources/js/Pages/](mdc:resources/js/Pages) - Vue page components
- [resources/js/Components/](mdc:resources/js/Components) - Reusable Vue components
- [resources/js/Layouts/](mdc:resources/js/Layouts) - Page layouts
- [resources/css/](mdc:resources/css) - Stylesheets

### Key Models
- [app/Models/Internship.php](mdc:app/Models/Internship.php) - Internship opportunities
- [app/Models/Student.php](mdc:app/Models/Student.php) - Student profiles
- [app/Models/Company.php](mdc:app/Models/Company.php) - Company profiles
- [app/Models/Application.php](mdc:app/Models/Application.php) - Applications
- [app/Models/Message.php](mdc:app/Models/Message.php) - Messaging system

### Key Controllers
- [app/Http/Controllers/InternshipController.php](mdc:app/Http/Controllers/InternshipController.php) - Internship management
- [app/Http/Controllers/ApplicationController.php](mdc:app/Http/Controllers/ApplicationController.php) - Application handling
- [app/Http/Controllers/MessageController.php](mdc:app/Http/Controllers/MessageController.php) - Messaging
- [app/Http/Controllers/DashboardController.php](mdc:app/Http/Controllers/DashboardController.php) - Dashboard views

### Key Pages
- [resources/js/Pages/Dashboard.vue](mdc:resources/js/Pages/Dashboard.vue) - Main dashboard
- [resources/js/Pages/Internships/Index.vue](mdc:resources/js/Pages/Internships/Index.vue) - Internship listings
- [resources/js/Pages/Applications/Index.vue](mdc:resources/js/Pages/Applications/Index.vue) - Application management
- [resources/js/Pages/Messages/Index.vue](mdc:resources/js/Pages/Messages/Index.vue) - Messaging interface

## Development Guidelines

### Authentication & Authorization
- Uses Laravel Breeze for authentication
- Role-based access control via user types
- Policies for resource authorization ([app/Policies/](mdc:app/Policies))

### Database Design
- Polymorphic relationships for User model
- Many-to-many relationships for applications and skills
- Foreign key constraints for data integrity

### Frontend Patterns
- Inertia.js for SPA-like experience
- Vue 3 Composition API
- Tailwind CSS for styling
- Component-based architecture

### Real-time Features
- Pusher integration for messaging
- Laravel Echo for WebSocket connections
- Real-time notifications

### File Management
- File uploads for attachments
- Storage configuration in [config/filesystems.php](mdc:config/filesystems.php)

## Common Development Tasks

### Adding New User Types
1. Create model in [app/Models/](mdc:app/Models)
2. Add migration in [database/migrations/](mdc:database/migrations)
3. Update User model polymorphic relationship
4. Create controller in [app/Http/Controllers/](mdc:app/Http/Controllers)
5. Add routes in [routes/web.php](mdc:routes/web.php)
6. Create Vue pages in [resources/js/Pages/](mdc:resources/js/Pages)

### Adding New Features
1. Create/update models and migrations
2. Add controller methods
3. Create form requests for validation
4. Add routes
5. Create Vue components and pages
6. Update policies if needed

### Styling Guidelines
- Use Tailwind CSS classes
- Follow existing component patterns
- Maintain responsive design
- Use consistent spacing and colors

## Environment Setup
- Laravel 8.x
- PHP 7.3+ or 8.0+
- Node.js for frontend assets
- Database (MySQL/PostgreSQL)
- Pusher account for real-time features

## Testing
- PHPUnit for backend testing
- Feature tests in [tests/Feature/](mdc:tests/Feature)
- Unit tests in [tests/Unit/](mdc:tests/Unit)

## Deployment
- Standard Laravel deployment process
- Ensure Pusher credentials are configured
- Run migrations and seeders
- Compile frontend assets
